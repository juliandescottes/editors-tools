/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* THIS FILE WAS AUTOGENERATED FROM aria.tmLanguage (UUID: 45dd46f3-4ff9-41c2-be21-662389784e9a) */
/****************************************************************
 * IT MIGHT NOT BE PERFECT, PARTICULARLY:                       *
 * IN DECIDING STATES TO TRANSITION TO,                         *
 * IGNORING WHITESPACE,                                         *
 * IGNORING GROUPS WITH ?:,                                     *
 * EXTENDING EXISTING MODES,                                    *
 * GATHERING KEYWORDS, OR                                       *
 * DECIDING WHEN TO USE PUSH.                                   *
 * ...But it's a good start from an existing *.tmlanguage file. *
 ****************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var AriaHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used
    // this.$rules = new jsRules().getRules();
    this.$rules = { 
      'start': [ 
      { 
        token: ['text', 'support.function.tpl'],
        regex: '(\\{)(Template)\\s*',
        push: [ 
          { 
            include: '#tpl-stuff' 
          },
          { 
            token:  ['support.function.tpl'],
            regex: '\\{\\/(Template)\\}',
            next: 'pop' 
          },
          { 
            defaultToken: 'source.template.tpl' 
          } 
        ],
      },
      { 
            include: '#tpl-stuff' 
      }],
      '#tpl-basic-keyword': 
       [ { token: 'storage.tag.tpl',
           regex: '\\b(data|bind|bindRefreshTo|bindProcessingTo|to|inside|inArray|inView|inSortedView)\\b' } ],
      '#tpl-expression': 
       [ { token: 'constant.other.tpl',
           regex: '\\$\\{.*?(\\})(?=[^\\}]*($|\\{|//))',
            } ],
      '#tpl-fwk-keyword': 
       [ { token: 'storage.tag.tpl',
           regex: '\\$\\w+',
            } ],
      '#tpl-stuff': 
       [ { include: '#tpl-basic-keyword' },
         { include: '#tpl-fwk-keyword' },
         { include: '#tpl-statement' },
         { include: '#tpl-widget' }, 
         { include: '#tpl-string' }, 
         { include: '#tpl-expression' }, 
         { include: '#html-tag' },
         { include: '#tpl-comment' }],
      '#tpl-statement': 
       [ {
           token: ['text', 'support.function.tpl','text', 'support.function.tpl', 'text', 'text'],
           regex: '(\\{/?\\s*)(\\w+)(?:(\\s*)(\\w+)(\\([^)]*\\)))?(.*?\\}|$)',
            } ],
      '#tpl-widget': 
       [ {
           token: ['text', 'support.function.tpl','text', 'storage.tag.tpl'],
           regex: '(\\{\\/?\\s*)(\\@\\w+)(\\:)(\\w+)',
            } ],
      '#tpl-string': 
       [ {
           token: ['string.tpl'],
           regex: '"[^"]+"',
            } ],
      '#html-tag': 
       [ { 
           token: ['text', 'variable.tpl'],
           regex: '(</?\\s*)(\\w+)\\b',
            } ],
      '#tpl-comment': 
       [{ 
          token: ['comment.tpl'],
          regex: '//.*$',
        },{
          token : "comment", // multi line comment
          regex : "\\/\\*",
          next : "comment"
        }],
      "comment" : [
            {
                token : "comment", // closing comment
                regex : ".*?\\*\\/",
                next : "#tpl-stuff"
            }, {
                token : "comment", // comment spanning whole line
                regex : ".+"
            }
        ]  }
    this.normalizeRules();
};

oop.inherits(AriaHighlightRules, TextHighlightRules);

exports.AriaHighlightRules = AriaHighlightRules;
});